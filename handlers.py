from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command, StateFilter, Text
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
import logging
from bot_db import people_add, power_add, db_get_pow, people_get, trans_get, task_add, task_get, num_sql, trans_update, people_stat, trans_stat, powers_stat, oldpeople_stat
from kbrd import main_keyboard, answ_keyboard, ktp_keyboard, onf_keyboard, stats_keyboard
from config import POWER_GK, FIL1, FIL2, FIL3


txt_p = ''
txt_c = ''
user_dict: dict[int, dict[str, str | int]] = {}

logger2 = logging.getLogger(__name__)
logger2.setLevel(logging.INFO)
handler2 = logging.FileHandler(f"{__name__}.log")
formatter2 = logging.Formatter("%(name)s %(asctime)s %(levelname)s %(message)s")

handler2.setFormatter(formatter2)
logger2.addHandler(handler2)

logger2.info(f'Handlers created for module {__name__}...')

router = Router()


class FSMFillForm(StatesGroup):
  person_st = State()
  category_st = State()
  new_tasks = State()
  ktp_update = State()
  ktp_save = State()


@router.message(Command(commands='start'))
async def start_command(message: Message):
  await message.answer(f'<b>{message.from_user.first_name}</b>, <i>—ç—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –±–æ—Ç —ç–ª–µ–∫—Ç—Ä–æ—É—á–∞—Å—Ç–∫–∞ –ì–ö ‚ö°</i>', reply_markup=main_keyboard())


@router.message(Command(commands='zakoma'))
async def zakoma_command(message: Message):
  await message.answer_photo(FIL1)


@router.message(Command(commands='motor'))
async def motor_command(message: Message):
  await message.answer_photo(FIL2)
  await message.answer_photo(FIL3)


@router.message(Command(commands='statuspower'))
async def st_power_command(message: Message):
  await message.answer(f'<b>–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è:</b> ', reply_markup=answ_keyboard())


@router.message(Command(commands='statist'))
async def statist_command(message: Message):
  await message.answer(f'<i>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—á–∞—Å—Ç–∫—É –∑–∞ –º–µ—Å—è—Ü: </i>',
                       reply_markup=stats_keyboard())

@router.message(Command(commands='admin'), F.from_user.id != 463456492)
async def st_not_admin(message: Message):
  await message.answer(f'üõë <i>–≠—Ç–∞ –∫–æ–Ω–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!</i>', reply_markup=stats_keyboard())
  logger2.info(f'–∫–æ–Ω–º–∞–Ω–¥–∞ admin –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!...')


@router.message(Command(commands='admin'), F.from_user.id == 463456492, StateFilter(default_state))
async def admin_stat(message: Message, state: FSMContext):
  await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ (yes|no) –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –ö–¢–ü (on|off) —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª')
  await state.set_state(FSMFillForm.person_st)


@router.message(StateFilter(FSMFillForm.person_st))
async def person_add(message: Message, state: FSMContext):
  await state.update_data(name=message.text)
  await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏–ª–∏ –∫–æ–¥ –ö–¢–ü (p|t)')
  await state.set_state(FSMFillForm.category_st)


@router.message(StateFilter(FSMFillForm.category_st))
async def cat_add(messsage: Message, state: FSMContext):
  await state.update_data(categ=messsage.text)
  user_dict[messsage.from_user.id] = await state.get_data()
  work = user_dict[messsage.from_user.id]['name'].lower()
  kat = user_dict[messsage.from_user.id]['categ'].lower()
  people_add(work, kat)
  if kat == 'p':
    tcat = '–ø–µ—Ä—Å–æ–Ω–∞–ª'
  elif kat == 't':
    tcat = '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã'
  await messsage.answer(
    text=f'<b>–û—Ç–ª–∏—á–Ω–æ!</b>\n<i>–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</i> <b>{tcat}</b>',
    reply_markup=main_keyboard())
  logger2.info(f'–û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {tcat}...')
  await state.clear()


@router.message(Command(commands='newtask'), StateFilter(default_state))
async def admin_task(message: Message, state: FSMContext):
  await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)')
  await state.set_state(FSMFillForm.new_tasks)


@router.message(StateFilter(FSMFillForm.new_tasks))
async def newtasks_add(message: Message, state: FSMContext):
  await state.update_data(name=message.text)
  task_add(message.text)
  await message.answer(
    text=f'<b>–û—Ç–ª–∏—á–Ω–æ!</b>\n<i>–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</i>',
    reply_markup=main_keyboard())
  logger2.info(f'–û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...')
  await state.clear()


@router.message(Command(commands='statusktp'), StateFilter(default_state))
async def st_ktp_command(message: Message, state: FSMContext):
  await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ö–¢–ü –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è : ',
                       reply_markup=ktp_keyboard())
  await state.set_state((FSMFillForm.ktp_update))


@router.callback_query(
  StateFilter(FSMFillForm.ktp_update),
  Text(text=['–ö–¢–ü 160', '–ö–¢–ü 250', '–ö–¢–ü 400', '–ö–¢–ü 630', '–ö–¢–ü 2500']))
async def ktp_press(callback: CallbackQuery, state: FSMContext):
  await state.update_data(name=callback.data)
  await callback.message.delete()
  await callback.message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ö–¢–ü :)',
                                reply_markup=onf_keyboard())
  await state.set_state(FSMFillForm.ktp_save)


@router.callback_query(StateFilter(FSMFillForm.ktp_save),
                       Text(text=['on', 'off']))
async def st_press(callback: CallbackQuery, state: FSMContext):
  await state.update_data(stat=callback.data)
  user_dict[callback.from_user.id] = await state.get_data()
  ktp = user_dict[callback.from_user.id]['name']
  onf = user_dict[callback.from_user.id]['stat']
  trans_update(ktp, onf)
  await callback.answer(text=f'–í—ã–±—Ä–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ {onf}')
  await callback.message.delete()
  await callback.message.answer(text=f'–°–æ—Å—Ç–æ—è–Ω–∏–µ {ktp} –∏–∑–º–µ–Ω–µ–Ω–æ: <b>{onf}</b>',
                                reply_markup=main_keyboard())
  logger2.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ {ktp} –∏–∑–º–µ–Ω–µ–Ω–æ: {onf}...')
  await state.clear()


@router.callback_query(lambda c: c.data == 'power')
async def pr_callback_start(callback: CallbackQuery):
  # await callback.answer(text='‚ö° –ó–∞–ø—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–µ–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è', show_alert=True)
  # await callback.answer(text=f'–ü–∏—Ç–∞–Ω–∏–µ: ‚ö° {db_get_pow()}')
  await callback.answer()
  await callback.message.edit_text(text=f'–ü–∏—Ç–∞–Ω–∏–µ: ‚ö° {db_get_pow()}',
                                   reply_markup=callback.message.reply_markup)


@router.callback_query(lambda c: c.data == 'workers')
async def pr_callback_workers(callback: CallbackQuery):
  #await callback.answer(text='–≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –Ω–∞ —É—á–∞—Å—Ç–∫–µ')
  await callback.message.edit_text(people_get(),
                                   reply_markup=callback.message.reply_markup)
  await callback.answer()


@router.callback_query(lambda c: c.data == 'transformers')
async def pr_callback_transformers(callback: CallbackQuery):
  #await callback.answer(text='–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–π')
  await callback.message.edit_text(trans_get(),
                                   reply_markup=callback.message.reply_markup)
  await callback.answer()


@router.callback_query(lambda c: c.data == 'tasks')
async def task_get_start(callback: CallbackQuery):
  #await callback.answer(text='—á–µ–º –∑–∞–Ω—è—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª –Ω–∞ —É—á–∞—Å—Ç–∫–µ')
  await callback.message.edit_text(task_get(),
                                   reply_markup=callback.message.reply_markup)
  await callback.answer()


@router.callback_query(Text(text=['basic', 'backup']))
async def call_basic_buckup(callback: CallbackQuery):
  if callback.data == 'basic':
    powered = POWER_GK[0]
    power_add(powered)
  if callback.data == 'backup':
    powered = POWER_GK[1]
    power_add(powered)
  await callback.answer(text='–ü–∏—Ç–∞–Ω–∏–µ: ‚ö° ' + powered, show_alert=True)
  # await callback.message.delete()
  await callback.message.edit_text(
    f'‚ö° <i>–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ</i>',
    reply_markup=main_keyboard())
  logger2.info(f'–°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–æ {powered}...')


@router.callback_query(
  Text(text=['worktime', 'oldworktime', 'ontrans', 'tenkvoff', 'statoff']))
async def call_work_onf(callback: CallbackQuery):
  if callback.data == 'worktime':
    await callback.message.edit_text(people_stat(),
                                     reply_markup=stats_keyboard())
  if callback.data == 'oldworktime':
    await callback.message.edit_text(oldpeople_stat(),
                                     reply_markup=stats_keyboard())
  if callback.data == 'ontrans':
    await callback.message.edit_text(trans_stat(),
                                     reply_markup=stats_keyboard())
  if callback.data == 'tenkvoff':
    await callback.message.edit_text(powers_stat(),
                                     reply_markup=stats_keyboard())
  if callback.data == 'statoff':
    await callback.message.delete()
    await callback.message.answer(f'‚ö° <i>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–∫–æ–Ω—á–µ–Ω</i>',
                                  reply_markup=main_keyboard())
    logger2.info(f'–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–∫–æ–Ω—á–µ–Ω...')


@router.message(F.photo)
async def send_photo(message: Message):
  print(message.photo[-1].file_id)
  await message.reply_photo(message.photo[-1].file_id)


@router.message()
async def other_message(message: Message):
  await message.answer(
    text=
    f'‚úã <b>{message.from_user.first_name}</b>, <i>—è –Ω–µ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è</i>\nüëâ <b>–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –∏–ª–∏ –∫–Ω–æ–ø–∫–∏</b>',
    reply_markup=main_keyboard())
  # await message.answer(people_stat(), reply_markup=main_keyboard())
# print('Handlers created', '.' * 24)